{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { logout } from '../auth/ngrx/auth.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"primeng/api\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@ngrx/store\";\nexport class ErrorInterceptor {\n  constructor(messageService, router, store) {\n    this.messageService = messageService;\n    this.router = router;\n    this.store = store;\n  }\n  intercept(req, next) {\n    return next.handle(req).pipe(catchError(error => {\n      if (error.status == 401) {\n        // Cierra la sesión y redirige al usuario\n        this.store.dispatch(logout());\n        // Muestra un mensaje de error\n        this.messageService.add({\n          severity: 'warn',\n          summary: 'Sesión expirada',\n          detail: 'Tu sesión ha expirado. Por favor, inicia sesión de nuevo.',\n          life: 8000\n        });\n      } else if (error.error && error.error.Errors) {\n        // Manejo de otros errores\n        error.error.Errors.forEach(errorMsg => {\n          this.messageService.add({\n            severity: 'error',\n            summary: error.error.Message,\n            detail: errorMsg,\n            life: 8000\n          });\n        });\n      } else {\n        this.messageService.add({\n          severity: 'error',\n          summary: 'Error',\n          detail: error.message || 'Error desconocido',\n          life: 8000\n        });\n      }\n      return throwError(() => new Error(error.message));\n    }));\n  }\n  static #_ = this.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.MessageService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.Store));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["throwError","catchError","logout","ErrorInterceptor","constructor","messageService","router","store","intercept","req","next","handle","pipe","error","status","dispatch","add","severity","summary","detail","life","Errors","forEach","errorMsg","Message","message","Error","_","i0","ɵɵinject","i1","MessageService","i2","Router","i3","Store","_2","factory","ɵfac"],"sources":["C:\\PRUEBAS\\back\\Frontend\\src\\app\\shared\\interceptors\\error.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { MessageService } from 'primeng/api'; // O el servicio que uses para mostrar mensajes\r\nimport { Router } from '@angular/router'; // Para redirigir al usuario\r\nimport { AppState } from 'src/app/app.state';\r\nimport { Store } from '@ngrx/store';\r\nimport { logout } from '../auth/ngrx/auth.actions';\r\n\r\n@Injectable()\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n    constructor(\r\n        private messageService: MessageService,\r\n        private router: Router,\r\n        private store: Store<AppState>\r\n    ) { }\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        return next.handle(req).pipe(\r\n            catchError((error: HttpErrorResponse) => {\r\n                if (error.status == 401) {\r\n\r\n                    // Cierra la sesión y redirige al usuario\r\n                    this.store.dispatch(logout());\r\n\r\n                    // Muestra un mensaje de error\r\n                    this.messageService.add({\r\n                        severity: 'warn',\r\n                        summary: 'Sesión expirada',\r\n                        detail: 'Tu sesión ha expirado. Por favor, inicia sesión de nuevo.',\r\n                        life: 8000\r\n                    });\r\n                } else if (error.error && error.error.Errors) {\r\n                    // Manejo de otros errores\r\n                    error.error.Errors.forEach((errorMsg: string) => {\r\n                        this.messageService.add({\r\n                            severity: 'error',\r\n                            summary: error.error.Message,\r\n                            detail: errorMsg,\r\n                            life: 8000\r\n                        });\r\n                    });\r\n                } else {\r\n                    this.messageService.add({\r\n                        severity: 'error',\r\n                        summary: 'Error',\r\n                        detail: error.message || 'Error desconocido',\r\n                        life: 8000\r\n                    });\r\n                }\r\n\r\n                return throwError(() => new Error(error.message));\r\n            })\r\n        );\r\n    }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;AAK3C,SAASC,MAAM,QAAQ,2BAA2B;;;;;AAGlD,OAAM,MAAOC,gBAAgB;EACzBC,YACYC,cAA8B,EAC9BC,MAAc,EACdC,KAAsB;IAFtB,KAAAF,cAAc,GAAdA,cAAc;IACd,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,KAAK,GAALA,KAAK;EACb;EAEJC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAC9C,OAAOA,IAAI,CAACC,MAAM,CAACF,GAAG,CAAC,CAACG,IAAI,CACxBX,UAAU,CAAEY,KAAwB,IAAI;MACpC,IAAIA,KAAK,CAACC,MAAM,IAAI,GAAG,EAAE;QAErB;QACA,IAAI,CAACP,KAAK,CAACQ,QAAQ,CAACb,MAAM,EAAE,CAAC;QAE7B;QACA,IAAI,CAACG,cAAc,CAACW,GAAG,CAAC;UACpBC,QAAQ,EAAE,MAAM;UAChBC,OAAO,EAAE,iBAAiB;UAC1BC,MAAM,EAAE,2DAA2D;UACnEC,IAAI,EAAE;SACT,CAAC;OACL,MAAM,IAAIP,KAAK,CAACA,KAAK,IAAIA,KAAK,CAACA,KAAK,CAACQ,MAAM,EAAE;QAC1C;QACAR,KAAK,CAACA,KAAK,CAACQ,MAAM,CAACC,OAAO,CAAEC,QAAgB,IAAI;UAC5C,IAAI,CAAClB,cAAc,CAACW,GAAG,CAAC;YACpBC,QAAQ,EAAE,OAAO;YACjBC,OAAO,EAAEL,KAAK,CAACA,KAAK,CAACW,OAAO;YAC5BL,MAAM,EAAEI,QAAQ;YAChBH,IAAI,EAAE;WACT,CAAC;QACN,CAAC,CAAC;OACL,MAAM;QACH,IAAI,CAACf,cAAc,CAACW,GAAG,CAAC;UACpBC,QAAQ,EAAE,OAAO;UACjBC,OAAO,EAAE,OAAO;UAChBC,MAAM,EAAEN,KAAK,CAACY,OAAO,IAAI,mBAAmB;UAC5CL,IAAI,EAAE;SACT,CAAC;;MAGN,OAAOpB,UAAU,CAAC,MAAM,IAAI0B,KAAK,CAACb,KAAK,CAACY,OAAO,CAAC,CAAC;IACrD,CAAC,CAAC,CACL;EACL;EAAC,QAAAE,CAAA,G;qBA5CQxB,gBAAgB,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,KAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAhBjC,gBAAgB;IAAAkC,OAAA,EAAhBlC,gBAAgB,CAAAmC;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}